/****************************************************************
 * Autor: Juan Acu침a.                                           *
 * Archivo: cm_cs.pcf.                                          *
 * Version: 0.9.                                                *
 * Descripcion: Plantilla para CommandManager, version para C#. *
 * Fecha: 30-08-2020.                                           *
 ****************************************************************/

IMPORTS

namespace CUSTOMNAMESPACE
{
    /// <summary>
    /// Una simple clase en C# que a traves de una conexi칩n MOTORCON permite ejecutar un CRUD completo.
    /// </summary>
    public class CommandManager
    {
        private MOTORCOMMAND _insert, _delete, _select, _update;
        private String insertar, borrar, buscar, actualizar;
        private MOTORCON con;
        /// <summary>
        /// Devuelve una instancia de CommandManager con la conexion (MOTORCON) dada.
        /// </summary>
        public CommandManager(MOTORCON conexion)
        {
            this.con = conexion;
        }
        #region Comandos
        /// <summary>
        /// El metodo Insert solicita dos parametros: el objeto a ser insertado y un boolean especificando si el identificacor del objeto se genera automaticamente desde la base de datos. Por defecto este ultimo es verdadero.
        /// </summary>
        public bool Insert<T>(T objeto, bool autoId = true) where T : class, new()
        {
            var miembros = typeof(T).GetProperties();
            String tabla = typeof(T).Name;
            FormatearComando();
            String val = "";
            SetFieldsForInsert<T>(out val, objeto);
            if (autoId)
            {
                val = "null," + val;
            }
            else
            {
                if (miembros[0].GetValue(objeto) is String)
                {
                    val = "'"+ miembros[0].GetValue(objeto) + "'," + val;
                }
                else
                {
                    val = miembros[0].GetValue(objeto).ToString() + "," + val;
                }
            }
            insertar = insertar.Replace("VALORES", val);
            insertar = insertar.Replace("TABLA", tabla);
            Console.WriteLine("Val = " + insertar);
            try
            {
                _insert = new MOTORCOMMAND(insertar, con);
                _insert.CommandType = CommandType.Text;
                if (_insert.ExecuteNonQuery() > 0)
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message);
                return false;
            }
        }
        /// </summary>
        /// El metodo Get solicita un parametro "id" de tipo dynamic(puede ser int o String) y devuelve un objeto del tipo especificado segun la id proporcionada.
        /// </summary>
        public T Get<T>(dynamic id) where T : class, new()
        {
            FormatearComando();
            String tabla = typeof(T).Name;
            String condicion ="";
            String val ="";
            SetFieldsForSelect<T>(out condicion, out val, id,typeof(T).GetProperties()[0],id is String);
            buscar = buscar.Replace("VALORES", val);
            buscar = buscar.Replace("TABLA", tabla);
            buscar = buscar.Replace("CONDICION", condicion);
            Console.WriteLine(buscar);
            try
            {
                _select = new MOTORCOMMAND(buscar, con);
                _select.CommandType = CommandType.Text;
                DATAREADER dReader = _select.ExecuteReader();
                Object[] obj = new Object[typeof(T).GetProperties().Length];
                while (dReader.Read())
                {
                    dReader.GetValues(obj);
                }
                dReader.Close();
                if (obj[0] == null)
                {
                    return default(T);
                }
                else
                {
                    T t = new T();
                    var m = typeof(T).GetProperties();
                    int l = 0;
                    foreach (var item in m)
                    {
                        item.SetValue(t, obj[l]);
                        l++;
                    }
                    return t;
                }
            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message);
                return default(T);
            }
        }
        /// </summary>
        /// El metodo GetAll no solicita parametros y devuelve una lista de objetos del tipo especificado (List<T> donde T es el tipo de los objetos).
        /// </summary>
        public List<T> GetAll<T>() where T : class, new()
        {
            String tabla = typeof(T).Name;
            FormatearComando();
            String val = "";
            SetFieldsForAll(out val);
            buscar = buscar.Replace("VALORES", val);
            buscar = buscar.Replace("TABLA", tabla);
            buscar = buscar.Replace("WHERE CONDICION", "");
            Console.WriteLine(buscar);
            try
            {
                _select = new MOTORCOMMAND(buscar, con);
                _select.CommandType = CommandType.Text;
                DATAREADER dReader = _select.ExecuteReader();
                DATAREADER dr = _select.ExecuteReader();
                int cuentaObjetos = 0;
                while (dr.Read())
                {
                    cuentaObjetos++;
                }
                dr.Close();
                List<T> lista = new List<T>();
                Object[][] obj = new Object[cuentaObjetos][];
                int l = 0;
                while (dReader.Read())
                {
                    obj[l] = new Object[typeof(T).GetProperties().Length];
                    for(int j = 0;j< typeof(T).GetProperties().Length; j++)
                    {
                        obj[l][j] = dReader.GetValue(j);
                    }
                    l++;
                }
                dReader.Close();
                T t;
                var m = typeof(T).GetProperties();
                foreach (var ob in obj)
                {
                    l = 0;
                    t = new T();
                    foreach (var item in m)
                    {
                        try
                        {
                            item.SetValue(t, ob[l]);
                        }
                        catch(ArgumentException e)
                        {
                            try
                            {
                                Char c = Char.Parse((String)ob[l]);
                                item.SetValue(t, c);
                            }
                            catch (ArgumentException ex)
                            {
                                bool b = ((String)ob[l]).Equals("1");
                                item.SetValue(t, b);
                            }
                        }
                        l++;
                    }
                    lista.Add(t);
                }
                return lista;
            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message);
                return null;
            }
        }
        /// </summary>
        /// El metodo Update solicita un parametro: un objeto del tipo especificado con los valores a actualizar y el identificador. Devuelve un bool indicando si fue posible realizar la acci칩n.
        /// </summary>
        public bool Update<T>(T objeto) where T : class, new()
        {
            String tabla = typeof(T).Name;
            var miembros = typeof(T).GetProperties();
            bool b = miembros[0].GetValue(objeto) is String;
            FormatearComando();
            String val = "";
            String condicion = "";
            SetFieldsForUpdate<T>(out condicion,out val,objeto:objeto,idIsString:b);
            actualizar = actualizar.Replace("VALORES", val);
            actualizar = actualizar.Replace("TABLA", tabla);
            actualizar = actualizar.Replace("CONDICION", condicion);
            Console.WriteLine(actualizar);
            try
            {
                _update = new MOTORCOMMAND(actualizar, con);
                _update.CommandType = CommandType.Text;
                if (_update.ExecuteNonQuery() > 0)
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            catch (Exception e)
            {
                Console.WriteLine("Error: " + e.Message);
                return false;
            }

        }
        /// </summary>
        /// El metodo Delete solicita un parametro: un objeto del tipo especificado con el identificador. Devuelve un bool indicando si fue posible realizar la acci칩n.
        /// </summary>
        public bool Delete<T>(T objeto) where T : class, new()
        {
            String tabla = typeof(T).Name;
            var miembros = typeof(T).GetProperties();
            FormatearComando();
            String condicion = "";
            if(miembros[0].GetValue(objeto) is String)
            {
                condicion = FormatId(miembros[0].Name, miembros[0].GetValue(objeto), true);
            }
            else
            {
                condicion = FormatId(miembros[0].Name, miembros[0].GetValue(objeto));
            }
            borrar = borrar.Replace("TABLA", tabla);
            borrar = borrar.Replace("CONDICION", condicion);
            Console.WriteLine(borrar);
            try
            {
                _delete = new MOTORCOMMAND(borrar, con);
                _delete.CommandType = CommandType.Text;
                if (_delete.ExecuteNonQuery() > 0)
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            catch (Exception e)
            {
                Console.WriteLine("Error: " + e.Message);
                return false;
            }
        }
        #endregion

        #region Comandos Especiales
        /// </summary>
        /// El metodo Get solicita un parametro "id" de tipo dynamic(puede ser int o String) y devuelve un objeto del tipo especificado segun la id proporcionada.
        /// </summary>
        public List<T> Find<T>(String field, dynamic value) where T : class, new()
        {
            FormatearComando();
            String tabla = typeof(T).Name;
            String condicion = FormatId(field, value, value is String);
            buscar = buscar.Replace("VALORES", "*");
            buscar = buscar.Replace("TABLA", tabla);
            buscar = buscar.Replace("CONDICION", condicion);
            Console.WriteLine(buscar);
            try
            {
                _select = new MOTORCOMMAND(buscar, con);
                _select.CommandType = CommandType.Text;
                DATAREADER dReader = _select.ExecuteReader();
                DATAREADER dr = _select.ExecuteReader();
                int cuentaObjetos = 0;
                while (dr.Read())
                {
                    cuentaObjetos++;
                }
                dr.Close();
                List<T> lista = new List<T>();
                Object[][] obj = new Object[cuentaObjetos][];
                int l = 0;
                while (dReader.Read())
                {
                    obj[l] = new Object[typeof(T).GetProperties().Length];
                    for (int j = 0; j < typeof(T).GetProperties().Length; j++)
                    {
                        obj[l][j] = dReader.GetValue(j);
                    }
                    l++;
                }
                dReader.Close();
                T t;
                var m = typeof(T).GetProperties();
                foreach (var ob in obj)
                {
                    l = 0;
                    t = new T();
                    foreach (var item in m)
                    {
                        try
                        {
                            item.SetValue(t, ob[l]);
                        }
                        catch (ArgumentException e)
                        {
                            try
                            {
                                Char c = Char.Parse((String)ob[l]);
                                item.SetValue(t, c);
                            }
                            catch (ArgumentException ex)
                            {
                                bool b = ((String)ob[l]).Equals("1");
                                item.SetValue(t, b);
                            }
                        }
                        l++;
                    }
                    lista.Add(t);
                }
                return lista;
            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message);
                return null;
            }
        }
        public bool NonQueryCommand(String comando)
        {
            try
            {
                var cmd = new MOTORCOMMAND(comando, con);
                cmd.CommandType = CommandType.Text;
                if (cmd.ExecuteNonQuery() > 0)
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message);
                return false;
            }
        }
        public DATAREADER QueryCommand(String comando)
        {
            var cmd = new MOTORCOMMAND(comando, con);
            cmd.CommandType = CommandType.Text;
            return cmd.ExecuteReader();
        }
        public ProcedureResult ExecuteProcedure(String procedureName)
        {
            var p = new ProcedureParams();
            return ExecuteProcedure(procedureName, p);
        }
        public ProcedureResult ExecuteProcedure(String procedureName, ProcedureParams prms)
        {
            var cmd = new MOTORCOMMAND();
            cmd.Connection = con;
            cmd.CommandText = procedureName;
            cmd.CommandType = CommandType.StoredProcedure;
            prms.ParseParams(cmd);
            if (cmd.ExecuteNonQuery() < 0)
            {
                return new ProcedureResult(true, prms.GetResults());
            }
            else
            {
                return new ProcedureResult(false, prms.GetResults());
            }
        }
        public ProcedureResult ExecuteFunction(String functionName, ProcedureParams prms, DBTYPE returnType)
        {
            //throw new NotImplementedException();
            if (prms.IsEmpty)
            {
                throw new TargetParameterCountException("");
            }
            var cmd = new MOTORCOMMAND();
            cmd.Connection = con;
            prms.IsFunction = true;
            String p = prms.GetStringParams();
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandText = functionName;
            //cmd.CommandText = "BEGIN :fres:= " + functionName + "(" + p + "); END;";
            prms.ParseParams(cmd);
            cmd.Parameters.Add("fres", returnType, ParameterDirection.ReturnValue);
            var al = cmd.ExecuteNonQuery();
            if (al < 0)
            {
                return new ProcedureResult(true, prms.GetResults());
            }
            else
            {
                return new ProcedureResult(false, prms.GetResults());
            }
        }
        public class ProcedureResult
        {
            public bool Success { get; }
            public ProcedureParams ProcedureParams { get; }
            public ProcedureResult(bool success, ProcedureParams pparams)
            {
                this.Success = success;
                this.ProcedureParams = pparams;
            }
        }
        public class ProcedureParams
        {
            OracleCommand cmd;
            bool isEmpty = true;
            object functionResult = null;
            bool isFunction = false;
            String status = "Created";
            public String Status { get { return status; } }
            public bool IsFunction { get { return isFunction; } set { if (status.Equals("Finished") || status.Equals("Parsed")) { return; } isFunction = value; } }
            public bool IsEmpty { get { return isEmpty; } }
            public object FunctionResult { get { return functionResult; } }
            List<Param> Params = new List<Param>();
            public ProcedureParams() { }
            public String GetStringParams()
            {
                if (status.Equals("Created"))
                {
                    return "";
                }
                String str = "";
                for(int i = 0; i < Params.Count; i++)
                {
                    str += ", :" + Params[i].Name.ToString();
                }
                return str.Remove(0,1);
            }
            public ProcedureParams GetResults()
            {
                if (status.Equals("Started") || status.Equals("Created") || status.Equals("Finished"))
                {
                    return this;
                }
                if (cmd.CommandType == CommandType.StoredProcedure || (isFunction && cmd.CommandType == CommandType.Text))
                {
                    if (Params.Count > 0)
                    {
                        for(int i =0;i< Params.Count; i++)
                        {
                            Params[i].Value = cmd.Parameters[Params[i].Name].Value;
                        }
                    }
                    if (isFunction)
                    {
                        functionResult = cmd.Parameters["fres"].Value;
                    }
                }
                status = "Finished";
                return this;
            }
            public void AddParam(String paramName, object value)
            {
                if (status.Equals("Finished"))
                {
                    return;
                }
                AddParam(paramName,value, ParameterDirection.Input);
            }
            public void AddParam(String paramName, object value, ParameterDirection dir)
            {
                var par = new Param();
                if (status.Equals("Finished"))
                {
                    return;
                }
                if (value is int)
                {
                    par.Type = DBTYPE.Int32;
                }
                else if (value is char)
                {
                    par.Type = DBTYPE.Char;
                }
                else if (value is String)
                {
                    par.Type = DBTYPE.Varchar2;
                }
                else if (value is bool)
                {
                    par.Type = DBTYPE.Boolean;
                }
                else if (value is double)
                {
                    par.Type = DBTYPE.Double;
                }
                else
                {
                    throw new InvalidCastException();
                }
                par.Name = paramName;
                par.Value = value;
                par.Direction = dir;
                Params.Add(par);
                isEmpty = false;
                status = "Started";
            }
            public void ParseParams(MOTORCOMMAND command)
            {
                if (status.Equals("Finished"))
                {
                    return;
                }
                this.cmd = command;
                if (isEmpty)
                {
                    return;
                }
                if(Params.Count > 0)
                {
                    for (int i = 0; i < Params.Count; i++)
                    {
                        cmd.Parameters.Add(Params[i].Name, Params[i].Type, Params[i].Value, Params[i].Direction);
                    }
                }
                status = "Parsed";
            }
            private class Param
            {
                public String Name;
                public object Value;
                public DBTYPE Type;
                public ParameterDirection Direction;
                public Param() { }
                public Param(String name, object value, DBTYPE type, ParameterDirection direction)
                {
                    this.Name = name;
                    this.Value = value;
                    this.Type = type;
                    this.Direction = direction;
                }
            }
        }
        #endregion

        private void FormatearComando()
        {
            insertar = "INSERT INTO TABLA VALUES(VALORES)";
            buscar = "SELECT VALORES FROM TABLA WHERE CONDICION";
            actualizar = "UPDATE TABLA SET VALORES WHERE CONDICION";
            borrar = "DELETE FROM TABLA WHERE CONDICION";

        }
        private void SetFieldsForSelect<T>(out String id, out String valores, dynamic idValue,PropertyInfo pi, bool idIsString = false) where T : class
        {//SELECT
            SetFieldsForAll(out valores);
            id = FormatId(pi.Name, idValue, idIsString);
        }
        private void SetFieldsForAll(out String valores)
        {//SELECT ALL
            valores = "*";
        }
        private void SetFieldsForUpdate<T>(out String id,out String valores, T objeto, bool idIsString = false) where T : class
        {//UPDATE
            var miembros = typeof(T).GetProperties();
            SetFieldsForInsert<T>(out valores,objeto,true);
            var idValue = miembros[0].GetValue(objeto);
            id = FormatId(miembros[0].Name, idValue, idIsString);
        }
        private void SetFieldsForInsert<T>(out String valores, T objeto, bool update = false) where T : class
        {//INSERT
            var miembros = typeof(T).GetProperties();
            valores = "";
            int i = 0;
            String[] vals = new String[miembros.Length];
            foreach(var f in miembros)
            {
                if (f.GetValue(objeto) == null)
                {
                    vals[i] = null;
                }
                else
                {
                    if (f.GetValue(objeto) is String)
                    {
                        vals[i] = "'" + f.GetValue(objeto).ToString() + "'";
                    }
                    if (f.GetValue(objeto) is int || f.GetValue(objeto) is short 
                        || f.GetValue(objeto) is Int32 || f.GetValue(objeto) is Int64
                        || f.GetValue(objeto) is float || f.GetValue(objeto) is double)
                    {
                        vals[i] = f.GetValue(objeto).ToString();
                    }
                    if (f.GetValue(objeto) is bool)
                    {
                        vals[i] = ((bool)f.GetValue(objeto)) ? "'1'" : "'0'";
                    }
                    if (f.GetValue(objeto) is DateTime)
                    {
                        vals[i] = "TO_DATE('" + Tools.DateToString((DateTime)f.GetValue(objeto),DateFormat.YearMonthDay,'-') + "','YYYY-MM-DD')";
                    }
                }
                i++;
            }
            i = 0;
            //ANULAR LA ID PORQUE LA GENERA LA BDD O ES CONDICION
            foreach (var inf in miembros)
            {
                if (i > 0)
                {
                    if (update)
                    {
                        if (vals[i] != null)
                        {
                            valores += inf.Name + "=" + vals[i] + ",";
                        }
                    }
                    else
                    {
                        if (vals[i] != null)
                        {
                            valores += vals[i] + ",";
                        }
                        else
                        {
                            valores += "null,";
                        }
                    }
                }
                i++;
            }
            valores = valores.Substring(0, valores.Length - 1);
        }
        private String FormatId(String field, dynamic idValue,bool idIsString = false)
        {
            if (idIsString)
            {
                return field + "='" + idValue + "'";
            }
            else
            {
                return field + "=" + idValue.ToString();
            }
        }
    }
    public static class Tools
    {
        
        public static DateTime StringToDate(String date,DateFormat format = DateFormat.DayMonthYear)
        {
            String d = "";
            String y = "";
            String m = "";
            date = date.Replace("/","");
            date = date.Replace("-", "");
            switch (format)
            {
                case DateFormat.DayMonthYear:
                    d = date.Substring(0,2);
                    m = date.Substring(2,2);
                    y = date.Substring(4,4);
                    break;
                case DateFormat.MonthDayYear:
                    m = date.Substring(0, 2);
                    d = date.Substring(2, 2);
                    y = date.Substring(4, 4);
                    break;
                case DateFormat.YearMonthDay:
                    y = date.Substring(0, 4);
                    m = date.Substring(4, 2);
                    d = date.Substring(6, 2);
                    break;
            }
            return new DateTime(Int32.Parse(y), Int32.Parse(m), Int32.Parse(d));
        }
        public static String DateToString(DateTime date, DateFormat outputFormat, char divisor = '/')
        {
            String output = "";
            String d;
            String y;
            String m;
            if(date.Day < 10)
            {
                d = "0" + date.Day.ToString();
            }
            else
            {
                d = date.Day.ToString();
            }
            if (date.Month < 10)
            {
                m = "0" + date.Month.ToString();
            }
            else
            {
                m = date.Month.ToString();
            }
            y = date.Year.ToString();
            switch (outputFormat)
            {
                case DateFormat.DayMonthYear:
                    output = d + divisor + m + divisor + y;
                    break;
                case DateFormat.MonthDayYear:
                    output = m + divisor + d + divisor + y;
                    break;
                case DateFormat.YearMonthDay:
                    output = y + divisor + m + divisor + d;
                    break;
            }
            return output;
        }
    }
    public enum DateFormat
    {
        YearMonthDay,
        DayMonthYear,
        MonthDayYear
    }
}